{"/development":{"title":"Introduction","data":{"":"This documentation is designed to guide developers through the setup and deployment of our web-based project. It serves as a comprehensive manual for constructing a robust development environment, integrating essential technologies, and deploying a fully functional application. Our aim is to ensure that every developer, regardless of their level of expertise, can follow the steps smoothly and understand the project's technical landscape.The documentation is divided into several key sections, each addressing a critical aspect of the development process:\nSystem Requirements:\nOutlines the hardware and software prerequisites needed to effectively work with the project.\nInstalling React and Libraries:\nProvides a detailed walkthrough for setting up the development environment, including the installation of React and other necessary libraries.\nAPI Configuration:\nDiscusses how to configure and utilize the API that interacts with our content management system for efficient data handling.\nDesign System:\nDescribes the design principles and visual assets that maintain the project's aesthetic consistency.\nComponents:\nDetails the reusable components built for this project, enhancing modularity and maintainability.\nDeployment:\nGuides through the final steps to deploy the application to a production environment, ensuring it is accessible and performs optimally.\nBy adhering to the outlined procedures, developers will ensure that the project is not only up to the technical standards but also aligned with our operational objectives. This documentation will help streamline the development process, minimize potential issues, and provide a clear path from setup to deployment."}},"/development/systemRequirements":{"title":"System Requirements","data":{"":"To ensure a smooth development and operation of the project, developers need to meet the following hardware and software prerequisites:\nNode.js: Version 14.x or newer. This is essential for supporting the latest JavaScript features and efficient package management with npm.\nNPM: Version 6.x or newer, which typically comes bundled with Node.js installations. This is used for managing project dependencies.\nGit: Version 2.x or higher for source control management, enabling collaboration and version tracking.\nText Editor or IDE: We recommend Visual Studio Code, Atom, or Sublime Text for their extensive support for JavaScript and React development.\nThese requirements are designed to provide a baseline that can support the advanced features and functionalities of our project, ensuring developers can work effectively without performance bottlenecks.\nBefore to start, the following requirements must be installed on your computer:","nodejs#Node.js":"Only Active LTS or Maintenance LTS versions are supported (currently v18 and v20). Odd-number releases of Node, known as \"current\" versions of Node.js, are not supported (e.g. v19, v21).\nYour preferred Node.js package manager:\nnpm (v6 and above)\nyarn\nIf you want to know more, read https://nodejs.org/en","npm#Npm":"To manage JavaScript packages, installing npm (Node Package Manager) is essential as it facilitates the installation, updating, and removal of packages in Node.js environments. It provides access to a vast registry of open-source libraries, simplifying the development process. Additionally, npm enhances project dependency management, ensuring consistent and reliable builds.\nnpm install","git#Git":"Used for version control management, it enables collaboration and version tracking. Ensure you have Git version 2.x or higher installed.\nFor the terminal command to check the installation and version of Git, you can include:\ngit --version\nThis command checks the current version of Git website installed on your machine. If readers need to install or update Git, you can direct them to visit the official Git website for detailed installation instructions.","visual-studio-code#Visual Studio Code":"We have used VSCode as code editor for the project, but feel free to use any text editor of your choice.","installing-react-and-libraries#Installing React and Libraries":"This section of the documentation guides you through the installation of React and the necessary libraries for the project. Ensure that you meet the system prerequisites before proceeding with the installation.\nTo install React along with all the required dependencies for the project, follow these steps:","clone-the-repository#Clone the repository:":"Clone the project repository to your local system using:\ngit clone git@github.com:fedux-collab-team-6/historical-parts.git\ncd historical-parts","development-dependencies#Development Dependencies":"The following are development dependencies used to optimize and test the project:\nVite and @vitejs/plugin-react: Modern tools for optimizing the development process and fast module bundling.\nnpm create vite@latest\nESLint and Prettier Tools to keep your code clean and consistent.\nJest Framework for unit testing in JavaScript.\nnpm install --save-dev jest","install-dependencies#Install dependencies":"React and React-DOM: Libraries for building the user interface of the project.\nnpm install react react-dom\n@mui/icons-material: Material-UI component libraries for React to build\nnpm install @mui/icons-material\n// If you are not already using Material UI in your project, you can add it with:\nnpm install @mui/material\nRedux and React-Redux: Manages navigation in React applications\nnpm install @reduxjs/toolkit\nAxios: Library for making HTTP requests from the browser.\nnpm install axios\nFramer Motion: Library for adding simple and powerful animations to React elements.\nnpm install framer-motion\nSwiper and Slick Carousel: Libraries for implementing responsive carousels and sliders.\nnpm install slick-carousel\nMake sure to regularly run npm update to keep all dependencies up to date."}},"/development/api/strapi":{"title":"Open source Node.js Headless CMS","data":{"":"In this section, we provide an overview of how we've implemented Strapi as our CMS. Strapi allows us to leverage a plugin-rich environment where developers can use their favorite frameworks and where editors can efficiently manage and distribute content.\nThis is a popular open-source content management system (CMS) that allows us to rapidly create APIs through a user-friendly interface. It is based on Node.js and offers extensive flexibility as it can be customized to fit any SQL or NoSQL database.","what-we-wse-strapi-for#What we wse Strapi for":"1. Rapid and Flexible API Development: Strapi enables us to quickly build REST or GraphQL APIs. We can easily create custom endpoints, configure data relationships, and manage content types with ease.2. Headless CMS: As a headless CMS, Strapi focuses solely on content management and delivery via APIs, making it ideal for integration with any front end, from static websites to mobile apps or IoT services.3. Content Management: Strapi provides a robust admin panel that allows our non-technical team members to easily manage content. This includes functionalities such as creating, updating, and deleting content, as well as managing users and customizing permissions.4. Plugins and Customization: Strapi supports a wide range of plugins that extend its functionality, such as authentication, email, and file management. We also have the capability to write our own plugins to meet specific needs.5. Community and Support: Being open source, Strapi has an active community of developers and users who constantly contribute new features, bug fixes, and support through forums and group chats.We appreciate Strapi for its extensibility and scalability, making it a popular choice among developers looking for a modern CMS solution that can evolve as the needs of our project grow.","how-we-install-it#How we install it":"","part-a-create-a-new-project-with-strapi#Part A: Create a new project with Strapi":"","#":"We will first create a new Strapi project on our machine by running a command in the terminal, and then register our first local administrator user.\nnpx create-strapi-app@latest my-project --quickstart","register-the-first-local-administrator-user#Register the first local administrator user":"Once the installation is complete, our browser automatically opens a new tab.\nBy completing the form, we create our own account.We now have access to the admin panel:","part-b-build-your-data-structure-with-the-content-type-builder#Part B: Build your data structure with the Content-type Builder":"First we will build a data structure for the content.\nThe Content-Type Builder helps us create our data structure.","create-a-collection-type#Create a collection type":"We need to create a collection type.\nThen we can describe the fields to display when adding a new product:\nClick on the Create your first Content type button.\nIf it's not showing up, go to Content-type Builder icon Content-type Builder in the main navigation.\nClick on Create new collection type.\nClick the Text field.\nType Name in the Name field.\nSwitch to the Advanced Settings tab, and check the Required field and the Unique field settings.\nClick on Add another field.\nChoose the Rich text (Blocks) field in the list.\nType Description under the Name field, then click Finish.\nFinally, click Save and wait for Strapi to restart."}}}
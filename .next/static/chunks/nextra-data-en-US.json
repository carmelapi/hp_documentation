{"/development/designSystem/components/skeleton":{"title":"Skeleton","data":{"":"The Skeleton component in React is a common solution for enhancing user experience during asynchronous data loading, particularly used in interfaces where content takes time to fully load. The core concept behind the Skeleton is to provide a temporary visual placeholder for the space that will be occupied by the loaded data, reducing visual disorientation and perceived performance improvements.","structure#Structure":"The Skeleton component is highly configurable through props that define its appearance:\nwidth: The width of the skeleton component, which can be specified in pixels or as a percentage.\nheight: The height of the skeleton component, also definable in pixels or percentage.\nvariant: A CSS class that can be used to vary the appearance of the skeleton component, for example, to change the color or to include animations like a shimmering effect.","styling-and-functionality#Styling and Functionality":"The Skeleton is typically used in scenarios of asynchronous data loading such as fetching data from a server. When data is pending load, the Skeleton is displayed, creating an illusion of content being loaded which can help keep the user engaged and reduce the perception of slowness. For instance, on a product page, instead of product images and descriptions, placeholder bars and boxes that represent the position and size of the content that will be loaded might be shown.\nThe styling of the Skeleton component can be customized with CSS to fit the design of the rest of the application. Developers can add animations like a shimmering effect that simulates movement as the data is loading, increasing visual engagement and providing immediate feedback to the user that the system is active and functioning.","rendering-logic#Rendering Logic":"const Skeleton = ({ width, height, variant }) => {\n  const style = {\n    width,\n    height,\n  };\n  return <span className={`skeleton ${variant}`} style={style}></span>;\n};\nexport default Skeleton;"}},"/development/test":{"title":"Importance of Testing with Jest","data":{"":"Testing is a critical part of software development that ensures code quality and reliability. Jest is a popular JavaScript testing framework that simplifies writing tests, providing clear syntax and powerful tools.\nJest makes it easy to write tests by automatically mocking dependencies and providing a rich set of features to handle asynchronous tests, test coverage, and snapshots. Here’s why incorporating Jest into our project is beneficial:\nFast and Safe Refactoring: Jest tests can act as a safety net, allowing developers to refactor code confidently.\nDocumentation: Tests serve as documentation for our code. They help developers understand what the code is supposed to do.\nQuality Assurance: With Jest, we can ensure that our application behaves as expected under various scenarios.\nFor developers inheriting the project, Jest tests provide:\nQuick Understanding: Tests help new developers understand the codebase quickly and how different parts of the application interact.\nEase of Adding Features: With existing tests, developers feel more comfortable adding new features as they can ensure their changes do not break existing functionality.\nPrevent Regression: Automated testing helps catch regressions early in the development process.","installing-jest#Installing Jest":"To start using Jest in ourproject, we first need to install it. Here’s how we can add Jest to our project:\nnpm install --save-dev jest\nAdd the following section to our package.json:\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\nIn our provided files, we have a function filterstring that constructs query strings based on filter objects. Here’s how Jest is used to test various scenarios:\nimport filterstring from \"./filter.js\";\nconst testobj1 = {\n  price: 500,\n};\ntest(\"Only price\", () => {\n  expect(filterstring(testobj1)).toBe(\"filters[Price][$lt]=500\");\n});\nconst testobj2 = {\n  location: \"Stockholm\",\n};\ntest(\"Only location\", () => {\n  expect(filterstring(testobj2)).toBe(\"filters[Location][$eq]=Stockholm\");\n});\nconst testobj3 = {\n  price: 300,\n  location: \"Stockholm\",\n  shippingOptions: \"Pick up yourself\",\n};\ntest(\"Price , shipping and location\", () => {\n  expect(filterstring(testobj3)).toBe(\n    \"filters[Price][$lt]=300&filters[Location][$eq]=Stockholm&filters[ShippingOptions][$eq]=Pick up yourself\"\n  );\n});\nconst testobj4 = {\n  price: 901,\n  location: \"Stockholm\",\n  shippingOptions: \"Pick up yourself\",\n  material: [\"Steel\"],\n};\ntest(\"Price, shipping, location and material\", () => {\n  expect(filterstring(testobj4)).toBe(\n    \"filters[Price][$lt]=901&filters[Location][$eq]=Stockholm&filters[ShippingOptions][$eq]=Pick up yourself&filters[$or][0][Material][$eq]=Steel\"\n  );\n});\nconst testobj5 = {\n  era: [\"C. 1880s New Renaissance\", \"E. 1900-1910s Art Nouveau\"],\n};\ntest(\"Two eras\", () => {\n  expect(filterstring(testobj5)).toBe(\n    \"filters[$or][0][Era][$eq]=C. 1880s New Renaissance&filters[$or][1][Era][$eq]=E. 1900-1910s Art Nouveau\"\n  );\n});\nconst testobj6 = {\n  condition: [\"Good condition\"],\n};\ntest(\"One condition\", () => {\n  expect(filterstring(testobj6)).toBe(\n    \"filters[$or][0][Condition][$eq]=Good condition\"\n  );\n});\nconst testobj7 = {\n  price: 200,\n  location: \"Eskilstuna\",\n  shippingOptions: \"Home delivery within 2-3 days\",\n  material: [\"Wood\"],\n  condition: [\"Needs renovation\"],\n};\ntest(\"Price, location, shipping, condition and material\", () => {\n  expect(filterstring(testobj7)).toBe(\n    \"filters[Price][$lt]=200&filters[Location][$eq]=Eskilstuna&filters[ShippingOptions][$eq]=Home delivery within 2-3 days&filters[$or][0][Material][$eq]=Wood&filters[$or][0][Condition][$eq]=Needs renovation\"\n  );\n});\nconst testobj8 = {\n  location: [\"Stockholm\", \"Eskilstuna\"],\n};\ntest(\"two locations\", () => {\n  expect(filterstring(testobj8)).toBe(\n    \"filters[Location][$eq]=Stockholm,Eskilstuna\"\n  );\n});\nconst testobj9 = {\n  price: 500,\n  location: \"Stockholm\",\n  shippingOptions: \"Pick up at store\",\n  material: [\"Wood\", \"Fiberglass\"],\n  era: [\"Allmoge\"],\n  condition: [\"Good condition\", \"Okey condition\"],\n};\ntest(\"Price, location, shippingOptions, material, era and condition\", () => {\n  expect(filterstring(testobj9)).toBe(\n    \"filters[Price][$lt]=500&filters[Location][$eq]=Stockholm&filters[ShippingOptions][$eq]=Pick up at store&filters[$or][0][Material][$eq]=Wood&filters[$or][1][Material][$eq]=Fiberglass&filters[$or][0][Era][$eq]=Allmoge&filters[$or][0][Condition][$eq]=Good condition&filters[$or][1][Condition][$eq]=Okey condition\"\n  );\n});\nconst testobj10 = {\n  material: [\"Steel\", \"Wood\", \"Fiberglass\"],\n  era: [\n    \"1920s Swedish Grace, 20th-century Classicism\",\n    \"1940-1950s Modernism, Folkhem Architecture\",\n  ],\n};\ntest(\"Material, Era\", () => {\n  expect(filterstring(testobj10)).toBe(\n    \"filters[$or][0][Material][$eq]=Steel&filters[$or][1][Material][$eq]=Wood&filters[$or][2][Material][$eq]=Fiberglass&filters[$or][0][Era][$eq]=1920s Swedish Grace, 20th-century Classicism&filters[$or][1][Era][$eq]=1940-1950s Modernism, Folkhem Architecture\"\n  );\n});"}},"/development/designSystem/components/productCard":{"title":"Product Card","data":{"":"The ProductCard component is a critical part of our application's user interface, designed to display key information about products in a concise and visually appealing layout. This component is utilized across various parts of our application where product listings are required, providing a consistent and engaging user experience.","structure#Structure":"Link from \"react-router-dom\": Facilitates navigation to individual product details pages by wrapping the card in a link that directs to the product's specific URL","props#Props":"The component accepts a single prop:\nitem: An object containing all the necessary details about a product that needs to be displayed within the card.","styling-and-functionality#Styling and Functionality":"This component is designed to showcase products in a card format, which includes:\nProduct Image: Displays the primary image and a vector image that toggles on hover.\nProduct Details:: Shows the product's era and a brief description cut off after 50 characters to maintain a clean layout.\nPrice Information:: Displays the product's price.\nThe ProductCard is styled to be visually appealing and functional:\nDimensions and Padding: Fixed width and padding ensure that all cards have a uniform appearance.\nBorders and Background: Uses a subtle border and a light background color to enhance readability and focus on the content.\nHover Effects: Includes hover effects on the images to add interactivity and visual feedback.","rendering-logic#Rendering Logic":"Link Wrapper: The entire card is clickable, leading the user to a detailed page of the product using dynamic routing based on the product’s id.\nImage Display: The product images use CSS styles for a hover effect, where the main image fades in on hover and the vector image fades out.\nInformation Layout: Product information is laid out using Flexbox, ensuring the text and price are well-organized.\nimport { Link } from \"react-router-dom\";\nconst ProductCard = ({ item }) => {\n  return (\n    <Link className=\"\" to={`/product/${item.id}`}>\n      <div className=\"card w-72 bg-spindle-50 flex flex-col gap-2.5 p-8 border-[1px] border-coral-400\">\n        <div className=\"image w-full h-[250px] overflow-hidden relative\">\n          <img\n            src={`${item.attributes?.img?.data[0]?.attributes?.url}`}\n            alt=\"\"\n            className=\"w-full h-full object-cover opacity-0 hover:opacity-100 absolute\"\n          />\n          <img\n            src={`${item.attributes?.vectorImg?.data?.attributes?.url}`}\n            alt=\"\"\n            className=\"w-full h-full object-contain opacity-100 hover:opacity-0\"\n          />\n        </div>\n        <div className=\" flex-1\">\n          <p className=\" font-bold\"> {item.attributes?.era}</p>\n          <p className=\" text-wrap text-sm\">\n            {item.attributes?.productDescription.substring(0, 50)}...\n          </p>\n        </div>\n        <p className=\" font-medium\"> {item.attributes?.price} kr</p>\n      </div>\n    </Link>\n  );\n};\nexport default ProductCard;"}}}
{"/development/designSystem/tailwind":{"title":"Tailwind","data":{"tailwind-css#Tailwind Css":"Tailwind CSS works by scanning all of your HTML files, JavaScript components, and any other templates for class names, generating the corresponding styles and then writing them to a static CSS file.\nIt's fast, flexible, and reliable — with zero-runtime.\nInstall tailwindcss via npm, and create your tailwind.config.js file.\n> npm install -D tailwindcss  \n> npx tailwindcss init\nAdd the paths to all of your template files in your tailwind.config.js file.\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{html,js}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\nAdd the @tailwind directives for each of Tailwind’s layers to your main CSS file.\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\nRun the CLI tool to scan your template files for classes and build your CSS.\nnpx tailwindcss -i ./src/input.css -o ./src/output.css --watch"}},"/development/systemRequirements":{"title":"System Requirements","data":{"":"To ensure a smooth development and operation of the project, developers need to meet the following hardware and software prerequisites:\nNode.js: Version 14.x or newer. This is essential for supporting the latest JavaScript features and efficient package management with npm.\nNPM: Version 6.x or newer, which typically comes bundled with Node.js installations. This is used for managing project dependencies.\nGit: Version 2.x or higher for source control management, enabling collaboration and version tracking.\nText Editor or IDE: We recommend Visual Studio Code, Atom, or Sublime Text for their extensive support for JavaScript and React development.\nThese requirements are designed to provide a baseline that can support the advanced features and functionalities of our project, ensuring developers can work effectively without performance bottlenecks.\nBefore to start, the following requirements must be installed on your computer:","nodejs#Node.js":"Only Active LTS or Maintenance LTS versions are supported (currently v18 and v20). Odd-number releases of Node, known as \"current\" versions of Node.js, are not supported (e.g. v19, v21).\nYour preferred Node.js package manager:\nnpm (v6 and above)\nyarn\nIf you want to know more, read https://nodejs.org/en","npm#Npm":"To manage JavaScript packages, installing npm (Node Package Manager) is essential as it facilitates the installation, updating, and removal of packages in Node.js environments. It provides access to a vast registry of open-source libraries, simplifying the development process. Additionally, npm enhances project dependency management, ensuring consistent and reliable builds.\nnpm install","git#Git":"Used for version control management, it enables collaboration and version tracking. Ensure you have Git version 2.x or higher installed.\nFor the terminal command to check the installation and version of Git, you can include:\ngit --version\nThis command checks the current version of Git website installed on your machine. If readers need to install or update Git, you can direct them to visit the official Git website for detailed installation instructions.","visual-studio-code#Visual Studio Code":"We have used VSCode as code editor for the project, but feel free to use any text editor of your choice.","installing-react-and-libraries#Installing React and Libraries":"This section of the documentation guides you through the installation of React and the necessary libraries for the project. Ensure that you meet the system prerequisites before proceeding with the installation.\nTo install React along with all the required dependencies for the project, follow these steps:","clone-the-repository#Clone the repository:":"Clone the project repository to your local system using:\ngit clone git@github.com:fedux-collab-team-6/historical-parts.git\ncd historical-parts","development-dependencies#Development Dependencies":"The following are development dependencies used to optimize and test the project:\nVite and @vitejs/plugin-react: Modern tools for optimizing the development process and fast module bundling.\nnpm create vite@latest\nESLint and Prettier Tools to keep your code clean and consistent.\nJest Framework for unit testing in JavaScript.\nnpm install --save-dev jest","install-dependencies#Install dependencies":"React and React-DOM: Libraries for building the user interface of the project.\nnpm install react react-dom\n@mui/icons-material: Material-UI component libraries for React to build\nnpm install @mui/icons-material\n// If you are not already using Material UI in your project, you can add it with:\nnpm install @mui/material\nRedux and React-Redux: Manages navigation in React applications\nnpm install @reduxjs/toolkit\nAxios: Library for making HTTP requests from the browser.\nnpm install axios\nFramer Motion: Library for adding simple and powerful animations to React elements.\nnpm install framer-motion\nSwiper and Slick Carousel: Libraries for implementing responsive carousels and sliders.\nnpm install slick-carousel\nMake sure to regularly run npm update to keep all dependencies up to date."}},"/development":{"title":"Introduction","data":{"":"This documentation is designed to guide developers through the setup and deployment of our web-based project. It serves as a comprehensive manual for constructing a robust development environment, integrating essential technologies, and deploying a fully functional application. Our aim is to ensure that every developer, regardless of their level of expertise, can follow the steps smoothly and understand the project's technical landscape.The documentation is divided into several key sections, each addressing a critical aspect of the development process:\nSystem Requirements:\nOutlines the hardware and software prerequisites needed to effectively work with the project.\nInstalling React and Libraries:\nProvides a detailed walkthrough for setting up the development environment, including the installation of React and other necessary libraries.\nAPI Configuration:\nDiscusses how to configure and utilize the API that interacts with our content management system for efficient data handling.\nDesign System:\nDescribes the design principles and visual assets that maintain the project's aesthetic consistency.\nComponents:\nDetails the reusable components built for this project, enhancing modularity and maintainability.\nDeployment:\nGuides through the final steps to deploy the application to a production environment, ensuring it is accessible and performs optimally.\nBy adhering to the outlined procedures, developers will ensure that the project is not only up to the technical standards but also aligned with our operational objectives. This documentation will help streamline the development process, minimize potential issues, and provide a clear path from setup to deployment."}}}
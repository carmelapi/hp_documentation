{"/development/designSystem/components/breadcrumbs":{"title":"Breadcrumbs","data":{"":"We have integrated the Breadcrumbs component into our application to enhance user navigation. This component plays a crucial role by providing users with links back to previous pages or the home page, depending on their navigation path. It helps users understand their current location within the application and navigate effectively.\nWe have carefully crafted this component to ensure it is reusable and adaptable across various parts of our application. It allows for a consistent and intuitive navigation experience, helping our users understand their location and how to return to previously visited pages.","structure#Structure":"Our Breadcrumbs component is structured to dynamically display navigation paths based on user interaction. Here's how we've set it up:\nuseState: We initialize a state variable locationPath to store a segment of the current URL path.\nuseEffect, useState from \"react\": We use these hooks to manage the component's state and to handle side effects.\nHiOutlineChevronRight from \"react-icons/hi\": This icon serves as a visual separator between elements of the breadcrumb trail.\nuseLocation from \"react-router-dom\": This hook allows us to access the current location object which reflects where the application is at any given time.","logic#Logic":"Conditional Rendering: If prevLocation is an empty string, we render a link to the home page. Otherwise, we display prevLocation as a navigable link.\nIcons: We use the HiOutlineChevronRight icon as a delimiter between the segments of the breadcrumb trail.\nCurrent Path Display: The locationPath, extracted from the URL, is displayed and capitalized to enhance readability.","props#Props":"prevLocation: This prop is crucial for our component. It can either be an empty string or a specific path, influencing the content displayed as the previous link in our breadcrumb trail. This flexibility allows the Breadcrumbs component to adapt to different parts of our application, providing appropriate navigation links based on user interaction.\nimport { useEffect, useState } from \"react\";\nimport { HiOutlineChevronRight } from \"react-icons/hi\";\nimport { useLocation } from \"react-router-dom\";\nconst Breadcrumbs = ({ prevLocation }) => {\n  const location = useLocation();\n  const [locationPath, setLocationPath] = useState(\"\");\n  useEffect(() => {\n    setLocationPath(location.pathname.split(\"/\")[1]);\n  }, [location]);\n  return (\n    <div className=\"w-full py-10 sm:py-10 flex gap-3\">\n      <p className=\"text-sm font-normal text-spindle-900 capitalize flex items-center\">\n        <span>\n          {\" \"}\n          {prevLocation === \"\" ? (\n            <a className=\" hover:font-bold\" href=\"/\">\n              Home\n            </a>\n          ) : (\n            prevLocation\n          )}\n        </span>\n        <span className=\"px-1\">\n          <HiOutlineChevronRight />\n        </span>\n        <span className=\"capitalize font-semibold\">{locationPath}</span>\n      </p>\n    </div>\n  );\n};\nexport default Breadcrumbs;"}},"/development/designSystem/components/buttons":{"title":"Buttons","data":{"":"As part of our project's UI library, we have developed a Button component that serves as a versatile element across various user interfaces. This component is designed to be flexible, accommodating different styles and functionalities based on the props provided. Its ease of use and adaptability make it a critical component in our design system.\nThis component is integral to our application because it handles user interactions that involve moving between pages and executing actions. Its reusable design allows us to maintain a uniform look and feel across all buttons while accommodating specific functional requirements through props.","structure#Structure":"Our Button component is structured to dynamically display navigation paths based on user interaction. Here's how we've set it up:\nReact from \"react\": Ensures the use of React framework functionalities.\nLink from \"react-router-dom\": Provides routing capabilities that enable the button to navigate to different routes within the application.","props#Props":"Props\nOur Button component accepts several props that determine its appearance and behavior:\nlabel: This prop represents the text to be displayed on the button. It is essential for accessibility and user interaction.\nprimary: A boolean that determines the styling of the button. If true, the button uses the spindle-900 color theme, otherwise, it uses the coral-400 theme.\nicon: This optional prop allows the inclusion of an icon next to the button text, enhancing the visual appeal and providing additional context.\nurl: The navigation link for the button. This prop specifies the route to which the button should redirect the user when clicked.","styling-and-functionality#Styling and Functionality":"The Button component is styled using TailwindCSS for rapid development and consistency. It utilizes conditional rendering within the className attribute to apply different styles based on the primary prop:\nPrimary Style: Applies bg-spindle-900 with hover effects that invert the text and background colors.\nSecondary Style: Uses bg-coral-400 and modifies hover behavior similarly.\nThe button's design ensures it is fully adaptable for various parts of the application, whether it needs to stand out as a primary action or blend in as a secondary option.","rendering-logic#Rendering Logic":"The component renders a Link that acts as a button, allowing for navigation defined by the url prop. The button can optionally display an icon alongside the label text, which is controlled by the icon prop. The combination of text and icon enhances user interaction by making the button's purpose clear and visually distinct.\nimport { Link } from \"react-router-dom\";\nconst Button = ({ label, primary, icon, url }) => {\n  return (\n    <Link\n      className={`block ${primary ? \"bg-spindle-900 hover:text-spindle-900 border-spindle-900\" : \" bg-coral-400 hover:bg-none hover:text-coral-400 border-coral-400\"} cursor-pointer  text-light-200 hover:bg-light-200  rounded-full w-full text-base px-4 py-1 mb-3 flex items-center justify-center border-[1px]`}\n      to={url}\n    >\n      {icon && <span className=\" inline-flex items-center mr-2\">{icon}</span>}\n      {label}\n    </Link>\n  );\n};\nexport default Button;"}},"/development/test":{"title":"Importance of Testing with Jest","data":{"":"Testing is a critical part of software development that ensures code quality and reliability. Jest is a popular JavaScript testing framework that simplifies writing tests, providing clear syntax and powerful tools.\nJest makes it easy to write tests by automatically mocking dependencies and providing a rich set of features to handle asynchronous tests, test coverage, and snapshots. Here’s why incorporating Jest into our project is beneficial:\nFast and Safe Refactoring: Jest tests can act as a safety net, allowing developers to refactor code confidently.\nDocumentation: Tests serve as documentation for our code. They help developers understand what the code is supposed to do.\nQuality Assurance: With Jest, we can ensure that our application behaves as expected under various scenarios.\nFor developers inheriting the project, Jest tests provide:\nQuick Understanding: Tests help new developers understand the codebase quickly and how different parts of the application interact.\nEase of Adding Features: With existing tests, developers feel more comfortable adding new features as they can ensure their changes do not break existing functionality.\nPrevent Regression: Automated testing helps catch regressions early in the development process.","installing-jest#Installing Jest":"To start using Jest in ourproject, we first need to install it. Here’s how we can add Jest to our project:\nnpm install --save-dev jest\nAdd the following section to our package.json:\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\nIn our provided files, we have a function filterstring that constructs query strings based on filter objects. Here’s how Jest is used to test various scenarios:\nimport filterstring from \"./filter.js\";\nconst testobj1 = {\n  price: 500,\n};\ntest(\"Only price\", () => {\n  expect(filterstring(testobj1)).toBe(\"filters[Price][$lt]=500\");\n});\nconst testobj2 = {\n  location: \"Stockholm\",\n};\ntest(\"Only location\", () => {\n  expect(filterstring(testobj2)).toBe(\"filters[Location][$eq]=Stockholm\");\n});\nconst testobj3 = {\n  price: 300,\n  location: \"Stockholm\",\n  shippingOptions: \"Pick up yourself\",\n};\ntest(\"Price , shipping and location\", () => {\n  expect(filterstring(testobj3)).toBe(\n    \"filters[Price][$lt]=300&filters[Location][$eq]=Stockholm&filters[ShippingOptions][$eq]=Pick up yourself\"\n  );\n});\nconst testobj4 = {\n  price: 901,\n  location: \"Stockholm\",\n  shippingOptions: \"Pick up yourself\",\n  material: [\"Steel\"],\n};\ntest(\"Price, shipping, location and material\", () => {\n  expect(filterstring(testobj4)).toBe(\n    \"filters[Price][$lt]=901&filters[Location][$eq]=Stockholm&filters[ShippingOptions][$eq]=Pick up yourself&filters[$or][0][Material][$eq]=Steel\"\n  );\n});\nconst testobj5 = {\n  era: [\"C. 1880s New Renaissance\", \"E. 1900-1910s Art Nouveau\"],\n};\ntest(\"Two eras\", () => {\n  expect(filterstring(testobj5)).toBe(\n    \"filters[$or][0][Era][$eq]=C. 1880s New Renaissance&filters[$or][1][Era][$eq]=E. 1900-1910s Art Nouveau\"\n  );\n});\nconst testobj6 = {\n  condition: [\"Good condition\"],\n};\ntest(\"One condition\", () => {\n  expect(filterstring(testobj6)).toBe(\n    \"filters[$or][0][Condition][$eq]=Good condition\"\n  );\n});\nconst testobj7 = {\n  price: 200,\n  location: \"Eskilstuna\",\n  shippingOptions: \"Home delivery within 2-3 days\",\n  material: [\"Wood\"],\n  condition: [\"Needs renovation\"],\n};\ntest(\"Price, location, shipping, condition and material\", () => {\n  expect(filterstring(testobj7)).toBe(\n    \"filters[Price][$lt]=200&filters[Location][$eq]=Eskilstuna&filters[ShippingOptions][$eq]=Home delivery within 2-3 days&filters[$or][0][Material][$eq]=Wood&filters[$or][0][Condition][$eq]=Needs renovation\"\n  );\n});\nconst testobj8 = {\n  location: [\"Stockholm\", \"Eskilstuna\"],\n};\ntest(\"two locations\", () => {\n  expect(filterstring(testobj8)).toBe(\n    \"filters[Location][$eq]=Stockholm,Eskilstuna\"\n  );\n});\nconst testobj9 = {\n  price: 500,\n  location: \"Stockholm\",\n  shippingOptions: \"Pick up at store\",\n  material: [\"Wood\", \"Fiberglass\"],\n  era: [\"Allmoge\"],\n  condition: [\"Good condition\", \"Okey condition\"],\n};\ntest(\"Price, location, shippingOptions, material, era and condition\", () => {\n  expect(filterstring(testobj9)).toBe(\n    \"filters[Price][$lt]=500&filters[Location][$eq]=Stockholm&filters[ShippingOptions][$eq]=Pick up at store&filters[$or][0][Material][$eq]=Wood&filters[$or][1][Material][$eq]=Fiberglass&filters[$or][0][Era][$eq]=Allmoge&filters[$or][0][Condition][$eq]=Good condition&filters[$or][1][Condition][$eq]=Okey condition\"\n  );\n});\nconst testobj10 = {\n  material: [\"Steel\", \"Wood\", \"Fiberglass\"],\n  era: [\n    \"1920s Swedish Grace, 20th-century Classicism\",\n    \"1940-1950s Modernism, Folkhem Architecture\",\n  ],\n};\ntest(\"Material, Era\", () => {\n  expect(filterstring(testobj10)).toBe(\n    \"filters[$or][0][Material][$eq]=Steel&filters[$or][1][Material][$eq]=Wood&filters[$or][2][Material][$eq]=Fiberglass&filters[$or][0][Era][$eq]=1920s Swedish Grace, 20th-century Classicism&filters[$or][1][Era][$eq]=1940-1950s Modernism, Folkhem Architecture\"\n  );\n});"}}}